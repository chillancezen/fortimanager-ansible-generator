#!/usr/bin/python
from __future__ import absolute_import, division, print_function
# Copyright 2020 Fortinet, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

__metaclass__ = type

ANSIBLE_METADATA = {'status': ['preview'],
                    'supported_by': 'community',
                    'metadata_version': '1.1'}

from ansible.module_utils.basic import AnsibleModule
from ansible.module_utils.connection import Connection
from ansible_collections.fortinet.fortimanager.plugins.module_utils.NAPI import NAPIManager


def main():
    clone_metadata = {
    {%- for selector in metadata %}
        '{{selector}}': {
            'params': [
            {%- for param in metadata[selector]['params'] %}
                '{{param}}' {%- if loop.index != loop.length -%}, {%- endif %}
            {%- endfor %}
            ],
            'urls': [
            {%- for url in metadata[selector]['urls'] %}
                '{{url}}' {%- if loop.index != loop.length -%}, {%- endif %}
            {%- endfor %}
            ],
            'mkey': {%if metadata[selector]['mkey'] -%}'{%- endif %}{{metadata[selector]['mkey']}}{%- if metadata[selector]['mkey'] -%}'{%- endif %}
        }{%- if loop.index != loop.length -%}, {%- endif %}
    {%- endfor %}
    }

    module_arg_spec = {
        'workspace_locking_adom': {
            'type': 'str',
            'required': False
        },
        'workspace_locking_timeout': {
            'type': 'int',
            'required': False,
            'default': 300
        },
        'rc_succeeded': {
            'required': False,
            'type': 'list'
        },
        'rc_failed': {
            'required': False,
            'type': 'list'
        },
        'clone': {
            'required': True,
            'type': 'dict',
            'options': {
                'selector': {
                    'required': True,
                    'type': 'str',
                    'choices': [
                    {%- for selector in metadata %}
                        '{{selector}}'{%- if loop.index != loop.length -%}, {%- endif %}
                    {%- endfor %}
                    ]
                },
                'self': {
                    'required': True,
                    'type': 'dict'
                },
                'target': {
                    'required': True,
                    'type': 'dict'
                }
            }
        }
    }
    module = AnsibleModule(argument_spec=module_arg_spec,
                           supports_check_mode=False)
    fmgr = None
    if module._socket_path:
        connection = Connection(module._socket_path)
        fmgr = NAPIManager(None, None, None, None, module, connection)
        fmgr.process_clone(clone_metadata)
    else:
        module.fail_json(msg='MUST RUN IN HTTPAPI MODE')
    module.exit_json(meta=module.params)


if __name__ == '__main__':
    main()

