from ansible.module_utils.basic import AnsibleModule
from ansible.module_utils.connection import Connection
#from ansible_collections.fortinet.fortimanager.plugins.module_utils.common import FAIL_SOCKET_MSG
#from ansible_collections.fortinet.fortimanager.plugins.module_utils.common import DEFAULT_RESULT_OBJ
#from ansible_collections.fortinet.fortimanager.plugins.module_utils.common import FMGRCommon
#from ansible_collections.fortinet.fortimanager.plugins.module_utils.common import FMGBaseException
#from ansible_collections.fortinet.fortimanager.plugins.module_utils.fortimanager import FortiManagerHandler
from ansible_collections.fortinet.fortimanager.plugins.module_utils.NAPI import NAPIManager


def main():
    jrpc_urls = [
    {%- for url in jrpc_urls %}
        '{{url}}'
        {%- if loop.index != loop.length -%}, {%- endif %}
    {%- endfor %}
    ]

    perobject_jrpc_urls = [
    {%- for url in perobject_jrpc_urls %}
        '{{url}}'
        {%- if loop.index != loop.length -%}, {%- endif %}
    {%- endfor %}
    ]

    url_params = [{%- for param in in_path_params %}'{{param.name}}'{%- if loop.index != loop.length -%}, {%- endif %}{%- endfor %}]
    module_primary_key = {% if mkey -%} '{{mkey}}' {% else -%} None {%- endif %}
    module_arg_spec = {
        'workspace_locking_adom': {
            'type': 'str',
            'required': False
        },
        'workspace_locking_timeout': {
            'type': 'int',
            'required': False,
            'default': 300
        },
        'state': {
            'type': 'str',
            'required': True,
            'choices': [
                'present',
                'absent'
            ]
        },
        {%- for param in in_path_params %}
        '{{param.name}}': {
            'required': True,
            'type': {% if param.type == 'integer' -%}' 'int' {% else -%} 'str' {%- endif %}
        },
        {%- endfor %}
        '{{level2_name}}': {
            'required': False,
            'type': 'dict',
            'options':{{body_schemas}}
        }
    }
    module = AnsibleModule(argument_spec=module_arg_spec,
                           supports_check_mode=False)

    fmgr = None
    if module._socket_path:
        connection = Connection(module._socket_path)
        fmgr = NAPIManager(jrpc_urls, perobject_jrpc_urls, module_primary_key, url_params, module, connection)
        fmgr.process_curd()
    else:
        module.fail_json(msg = 'MUST RUN IN HTTPAPI MODE')
    module.exit_json(meta = module.params)

if __name__ == '__main__':
    main()

